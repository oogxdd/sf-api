### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DonationCreateNestedManyWithoutSongInput {
  connect: [DonationWhereUniqueInput!]
  connectOrCreate: [DonationCreateOrConnectWithoutSongInput!]
  create: [DonationCreateWithoutSongInput!]
}

input DonationCreateOrConnectWithoutSongInput {
  create: DonationCreateWithoutSongInput!
  where: DonationWhereUniqueInput!
}

input DonationCreateWithoutSongInput {
  donatorEmail: String
  sum: Int!
}

input DonationOrderByRelationAggregateInput {
  _count: SortOrder
}

input DonationScalarWhereInput {
  AND: [DonationScalarWhereInput!]
  NOT: [DonationScalarWhereInput!]
  OR: [DonationScalarWhereInput!]
  donatorEmail: StringNullableFilter
  id: IntFilter
  songId: IntNullableFilter
  sum: IntFilter
}

input DonationUpdateManyMutationInput {
  donatorEmail: NullableStringFieldUpdateOperationsInput
  sum: IntFieldUpdateOperationsInput
}

input DonationUpdateManyWithWhereWithoutSongInput {
  data: DonationUpdateManyMutationInput!
  where: DonationScalarWhereInput!
}

input DonationUpdateManyWithoutSongInput {
  connect: [DonationWhereUniqueInput!]
  connectOrCreate: [DonationCreateOrConnectWithoutSongInput!]
  create: [DonationCreateWithoutSongInput!]
  delete: [DonationWhereUniqueInput!]
  deleteMany: [DonationScalarWhereInput!]
  disconnect: [DonationWhereUniqueInput!]
  set: [DonationWhereUniqueInput!]
  update: [DonationUpdateWithWhereUniqueWithoutSongInput!]
  updateMany: [DonationUpdateManyWithWhereWithoutSongInput!]
  upsert: [DonationUpsertWithWhereUniqueWithoutSongInput!]
}

input DonationUpdateWithWhereUniqueWithoutSongInput {
  data: DonationUpdateWithoutSongInput!
  where: DonationWhereUniqueInput!
}

input DonationUpdateWithoutSongInput {
  donatorEmail: NullableStringFieldUpdateOperationsInput
  sum: IntFieldUpdateOperationsInput
}

input DonationUpsertWithWhereUniqueWithoutSongInput {
  create: DonationCreateWithoutSongInput!
  update: DonationUpdateWithoutSongInput!
  where: DonationWhereUniqueInput!
}

input DonationWhereUniqueInput {
  id: Int
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createOneSong(data: SongCreateInput!): Song!
  createOneUser(data: UserCreateInput!): User!
  deleteOneSong(where: SongWhereUniqueInput!): Song
  login(email: String!, password: String!): AuthPayload
  signup(country: String, email: String!, nickname: String, password: String!): AuthPayload
  updateOneSong(data: SongUpdateInput!, where: SongWhereUniqueInput!): Song
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  song(where: SongWhereUniqueInput!): Song
  songs(after: SongWhereUniqueInput, before: SongWhereUniqueInput, first: Int, last: Int, orderBy: [SongOrderByWithRelationInput!]): [Song!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type Song {
  author: User
  cover: String
  createdAt: DateTime!
  id: Int!
  sum: Int!
  timeToComplete: String
  title: String!
  updatedAt: DateTime!
  url: String!
  url2: String
}

input SongCreateInput {
  author: UserCreateNestedOneWithoutSongsInput
  cover: String
  createdAt: DateTime
  donations: DonationCreateNestedManyWithoutSongInput
  sum: Int!
  timeToComplete: String
  title: String!
  updatedAt: DateTime
  url: String!
  url2: String
}

input SongCreateNestedManyWithoutAuthorInput {
  connect: [SongWhereUniqueInput!]
  connectOrCreate: [SongCreateOrConnectWithoutAuthorInput!]
  create: [SongCreateWithoutAuthorInput!]
}

input SongCreateOrConnectWithoutAuthorInput {
  create: SongCreateWithoutAuthorInput!
  where: SongWhereUniqueInput!
}

input SongCreateWithoutAuthorInput {
  cover: String
  createdAt: DateTime
  donations: DonationCreateNestedManyWithoutSongInput
  sum: Int!
  timeToComplete: String
  title: String!
  updatedAt: DateTime
  url: String!
  url2: String
}

input SongOrderByRelationAggregateInput {
  _count: SortOrder
}

input SongOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  cover: SortOrder
  createdAt: SortOrder
  donations: DonationOrderByRelationAggregateInput
  id: SortOrder
  sum: SortOrder
  timeToComplete: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  url: SortOrder
  url2: SortOrder
}

input SongUpdateInput {
  author: UserUpdateOneWithoutSongsInput
  cover: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  donations: DonationUpdateManyWithoutSongInput
  sum: IntFieldUpdateOperationsInput
  timeToComplete: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  url2: NullableStringFieldUpdateOperationsInput
}

input SongWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  country: String!
  email: String!
  id: Int!
  nickname: String
  password: String!
  songs: [Song!]!
}

input UserCreateInput {
  country: String
  email: String!
  nickname: String!
  password: String!
  songs: SongCreateNestedManyWithoutAuthorInput
}

input UserCreateNestedOneWithoutSongsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSongsInput
  create: UserCreateWithoutSongsInput
}

input UserCreateOrConnectWithoutSongsInput {
  create: UserCreateWithoutSongsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutSongsInput {
  country: String
  email: String!
  nickname: String!
  password: String!
}

input UserOrderByWithRelationInput {
  country: SortOrder
  email: SortOrder
  id: SortOrder
  nickname: SortOrder
  password: SortOrder
  songs: SongOrderByRelationAggregateInput
}

input UserUpdateOneWithoutSongsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSongsInput
  create: UserCreateWithoutSongsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutSongsInput
  upsert: UserUpsertWithoutSongsInput
}

input UserUpdateWithoutSongsInput {
  country: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  nickname: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutSongsInput {
  create: UserCreateWithoutSongsInput!
  update: UserUpdateWithoutSongsInput!
}

input UserWhereUniqueInput {
  email: String
  id: Int
  nickname: String
}